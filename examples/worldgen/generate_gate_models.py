#!/usr/bin/env python3
"""
生成门模型的OBJ文件
包括方形门和圆形门的3D几何体
"""
import math
import numpy as np
import os

def generate_square_gate_obj(filename: str, outer_width: float = 1.3, inner_width: float = 1.0, 
                           gate_height: float = 1.0, gate_thickness: float = 0.05):
    """生成方形门框的OBJ文件（包含UV坐标）"""
    
    vertices = []
    uv_coords = []
    faces = []
    vertex_count = 0
    
    # 计算门框的关键尺寸
    half_outer = outer_width / 2
    half_inner = inner_width / 2
    half_thickness = gate_thickness / 2
    
    # 前面（Z+）的顶点
    # 外框顶点
    vertices.extend([
        [-half_outer, -half_outer, half_thickness],  # 0: 左下
        [half_outer, -half_outer, half_thickness],   # 1: 右下  
        [half_outer, half_outer, half_thickness],    # 2: 右上
        [-half_outer, half_outer, half_thickness],   # 3: 左上
    ])
    
    # 内框顶点（门洞）
    vertices.extend([
        [-half_inner, -half_inner, half_thickness],  # 4: 内左下
        [half_inner, -half_inner, half_thickness],   # 5: 内右下
        [half_inner, half_inner, half_thickness],    # 6: 内右上
        [-half_inner, half_inner, half_thickness],   # 7: 内左上
    ])
    
    # 后面（Z-）的顶点
    # 外框顶点
    vertices.extend([
        [-half_outer, -half_outer, -half_thickness], # 8: 左下
        [half_outer, -half_outer, -half_thickness],  # 9: 右下
        [half_outer, half_outer, -half_thickness],   # 10: 右上
        [-half_outer, half_outer, -half_thickness],  # 11: 左上
    ])
    
    # 内框顶点（门洞）
    vertices.extend([
        [-half_inner, -half_inner, -half_thickness], # 12: 内左下
        [half_inner, -half_inner, -half_thickness],  # 13: 内右下
        [half_inner, half_inner, -half_thickness],   # 14: 内右上
        [-half_inner, half_inner, -half_thickness],  # 15: 内左上
    ])
    
    # 生成UV坐标（简化版，为每个面提供基本的UV映射）
    # 外框UV坐标
    outer_uv = [
        [0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0],  # 外框四个角
    ]
    # 内框UV坐标
    inner_ratio = inner_width / outer_width
    inner_offset = (1.0 - inner_ratio) / 2.0
    inner_uv = [
        [inner_offset, inner_offset], 
        [1.0 - inner_offset, inner_offset], 
        [1.0 - inner_offset, 1.0 - inner_offset], 
        [inner_offset, 1.0 - inner_offset]
    ]
    
    # 为所有顶点生成UV坐标
    uv_coords.extend(outer_uv)  # 前面外框 UV
    uv_coords.extend(inner_uv)  # 前面内框 UV
    uv_coords.extend(outer_uv)  # 后面外框 UV
    uv_coords.extend(inner_uv)  # 后面内框 UV
    
    # 生成面（注意顶点索引从1开始，包含UV坐标引用）
    # 前面的门框（环形面：外框减去内框）
    faces.extend([
        [(1, 1), (2, 2), (6, 6)],  # 下边右三角
        [(6, 6), (5, 5), (1, 1)],  # 下边左三角
        [(2, 2), (3, 3), (7, 7)],  # 右边下三角
        [(7, 7), (6, 6), (2, 2)],  # 右边上三角
        [(3, 3), (4, 4), (8, 8)],  # 上边右三角
        [(8, 8), (7, 7), (3, 3)],  # 上边左三角
        [(4, 4), (1, 1), (5, 5)],  # 左边下三角
        [(5, 5), (8, 8), (4, 4)],  # 左边上三角
    ])
    
    # 后面的门框（环形面：外框减去内框）
    faces.extend([
        [(9, 9), (14, 14), (10, 10)], # 下边右三角
        [(14, 14), (9, 9), (13, 13)], # 下边左三角
        [(10, 10), (15, 15), (11, 11)], # 右边下三角
        [(15, 15), (10, 10), (14, 14)], # 右边上三角
        [(11, 11), (16, 16), (12, 12)], # 上边右三角
        [(16, 16), (11, 11), (15, 15)], # 上边左三角
        [(12, 12), (13, 13), (9, 9)], # 左边下三角
        [(13, 13), (12, 12), (16, 16)], # 左边上三角
    ])
    
    # 连接前后面的侧边（使用简化UV坐标）
    # 外边的侧面
    faces.extend([
        [(1, 1), (9, 1), (10, 2)], [(10, 2), (2, 2), (1, 1)],    # 下边侧面
        [(2, 1), (10, 1), (11, 2)], [(11, 2), (3, 2), (2, 1)],   # 右边侧面  
        [(3, 1), (11, 1), (12, 2)], [(12, 2), (4, 2), (3, 1)],   # 上边侧面
        [(4, 1), (12, 1), (9, 2)], [(9, 2), (1, 2), (4, 1)],     # 左边侧面
    ])
    
    # 内边的侧面（门洞内壁）
    faces.extend([
        [(5, 1), (14, 2), (13, 2)], [(14, 2), (5, 1), (6, 1)],   # 下边内侧面
        [(6, 1), (15, 2), (14, 2)], [(15, 2), (6, 1), (7, 1)],   # 右边内侧面
        [(7, 1), (16, 2), (15, 2)], [(16, 2), (7, 1), (8, 1)],   # 上边内侧面  
        [(8, 1), (13, 2), (16, 2)], [(13, 2), (8, 1), (5, 1)],   # 左边内侧面
    ])
    
    # 写入OBJ文件
    with open(filename, 'w') as f:
        f.write("# Square Gate Model with UV coordinates\n")
        f.write("# Generated by generate_gate_models.py\n\n")
        
        # 写入顶点
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        f.write("\n")
        
        # 写入UV坐标
        for uv in uv_coords:
            f.write(f"vt {uv[0]:.6f} {uv[1]:.6f}\n")
        f.write("\n")
        
        # 写入面（包含UV坐标引用）
        for face in faces:
            face_str = "f"
            for vertex_idx, uv_idx in face:
                face_str += f" {vertex_idx}/{uv_idx}"
            f.write(face_str + "\n")
    
    print(f"Generated square gate model with UV coordinates: {filename}")

def generate_circle_gate_obj(filename: str, outer_radius: float = 0.7, inner_radius: float = 0.5,
                           gate_thickness: float = 0.1, segments: int = 32):
    """生成圆形门框的OBJ文件（包含UV坐标）"""
    
    vertices = []
    uv_coords = []
    faces = []
    
    half_thickness = gate_thickness / 2
    
    # 生成前面（Z+）的顶点和UV坐标
    # 外圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = outer_radius * math.cos(angle)
        y = outer_radius * math.sin(angle)
        vertices.append([x, y, half_thickness])
        # UV坐标：映射到[0,1]x[0,1]范围
        u = (x / outer_radius + 1.0) / 2.0
        v = (y / outer_radius + 1.0) / 2.0
        uv_coords.append([u, v])
    
    # 内圆顶点  
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = inner_radius * math.cos(angle)
        y = inner_radius * math.sin(angle)
        vertices.append([x, y, half_thickness])
        # UV坐标：映射到[0,1]x[0,1]范围
        u = (x / outer_radius + 1.0) / 2.0
        v = (y / outer_radius + 1.0) / 2.0
        uv_coords.append([u, v])
    
    # 生成后面（Z-）的顶点和UV坐标
    # 外圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = outer_radius * math.cos(angle)
        y = outer_radius * math.sin(angle)
        vertices.append([x, y, -half_thickness])
        # UV坐标：映射到[0,1]x[0,1]范围
        u = (x / outer_radius + 1.0) / 2.0
        v = (y / outer_radius + 1.0) / 2.0
        uv_coords.append([u, v])
    
    # 内圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = inner_radius * math.cos(angle)
        y = inner_radius * math.sin(angle)
        vertices.append([x, y, -half_thickness])
        # UV坐标：映射到[0,1]x[0,1]范围
        u = (x / outer_radius + 1.0) / 2.0
        v = (y / outer_radius + 1.0) / 2.0
        uv_coords.append([u, v])
    
    # 生成面（包含UV坐标引用）
    # 前面的圆环
    for i in range(segments):
        next_i = (i + 1) % segments
        # 外圆到内圆的四边形，分解为两个三角形
        outer_curr = i + 1  # OBJ索引从1开始
        outer_next = next_i + 1
        inner_curr = segments + i + 1
        inner_next = segments + next_i + 1
        
        faces.extend([
            [(outer_curr, outer_curr), (outer_next, outer_next), (inner_next, inner_next)],
            [(inner_next, inner_next), (inner_curr, inner_curr), (outer_curr, outer_curr)]
        ])
    
    # 后面的圆环
    for i in range(segments):
        next_i = (i + 1) % segments
        outer_curr = 2*segments + i + 1
        outer_next = 2*segments + next_i + 1
        inner_curr = 3*segments + i + 1
        inner_next = 3*segments + next_i + 1
        
        faces.extend([
            [(outer_curr, outer_curr), (inner_next, inner_next), (outer_next, outer_next)],
            [(inner_next, inner_next), (outer_curr, outer_curr), (inner_curr, inner_curr)]
        ])
    
    # 连接前后面的侧边
    # 外圆的侧面
    for i in range(segments):
        next_i = (i + 1) % segments
        front_outer = i + 1
        front_outer_next = next_i + 1
        back_outer = 2*segments + i + 1
        back_outer_next = 2*segments + next_i + 1
        
        faces.extend([
            [(front_outer, front_outer), (back_outer, back_outer), (back_outer_next, back_outer_next)],
            [(back_outer_next, back_outer_next), (front_outer_next, front_outer_next), (front_outer, front_outer)]
        ])
    
    # 内圆的侧面（门洞内壁）
    for i in range(segments):
        next_i = (i + 1) % segments
        front_inner = segments + i + 1
        front_inner_next = segments + next_i + 1
        back_inner = 3*segments + i + 1
        back_inner_next = 3*segments + next_i + 1
        
        faces.extend([
            [(front_inner, front_inner), (front_inner_next, front_inner_next), (back_inner_next, back_inner_next)],
            [(back_inner_next, back_inner_next), (back_inner, back_inner), (front_inner, front_inner)]
        ])
    
    # 写入OBJ文件
    with open(filename, 'w') as f:
        f.write("# Circle Gate Model with UV coordinates\n")
        f.write("# Generated by generate_gate_models.py\n\n")
        
        # 写入顶点
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        f.write("\n")
        
        # 写入UV坐标
        for uv in uv_coords:
            f.write(f"vt {uv[0]:.6f} {uv[1]:.6f}\n")
        f.write("\n")
        
        # 写入面（包含UV坐标引用）
        for face in faces:
            face_str = "f"
            for vertex_idx, uv_idx in face:
                face_str += f" {vertex_idx}/{uv_idx}"
            f.write(face_str + "\n")
    
    print(f"Generated circle gate model with UV coordinates: {filename}")

def main():
    """主函数：生成所有门模型"""
    # 创建输出目录
    output_dir = "gate_models"
    os.makedirs(output_dir, exist_ok=True)
    
    # 生成方形门
    square_gate_file = os.path.join(output_dir, "square_gate.obj")
    generate_square_gate_obj(square_gate_file)
    
    # 生成圆形门
    circle_gate_file = os.path.join(output_dir, "circle_gate.obj") 
    generate_circle_gate_obj(circle_gate_file)
    
    print(f"\nGate models saved to '{output_dir}' directory:")
    print(f"- {square_gate_file}")
    print(f"- {circle_gate_file}")

if __name__ == "__main__":
    main()
