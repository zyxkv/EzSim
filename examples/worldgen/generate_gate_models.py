#!/usr/bin/env python3
"""
生成门模型的OBJ文件
包括方形门和圆形门的3D几何体
"""
import math
import numpy as np
import os

def generate_square_gate_obj(filename: str, outer_width: float = 1.3, inner_width: float = 1.0, 
                           gate_height: float = 1.0, gate_thickness: float = 0.05):
    """生成方形门框的OBJ文件"""
    
    vertices = []
    faces = []
    vertex_count = 0
    
    # 计算门框的关键尺寸
    half_outer = outer_width / 2
    half_inner = inner_width / 2
    half_thickness = gate_thickness / 2
    
    # 前面（Z+）的顶点
    # 外框顶点
    vertices.extend([
        [-half_outer, -half_outer, half_thickness],  # 0: 左下
        [half_outer, -half_outer, half_thickness],   # 1: 右下  
        [half_outer, half_outer, half_thickness],    # 2: 右上
        [-half_outer, half_outer, half_thickness],   # 3: 左上
    ])
    
    # 内框顶点（门洞）
    vertices.extend([
        [-half_inner, -half_inner, half_thickness],  # 4: 内左下
        [half_inner, -half_inner, half_thickness],   # 5: 内右下
        [half_inner, half_inner, half_thickness],    # 6: 内右上
        [-half_inner, half_inner, half_thickness],   # 7: 内左上
    ])
    
    # 后面（Z-）的顶点
    # 外框顶点
    vertices.extend([
        [-half_outer, -half_outer, -half_thickness], # 8: 左下
        [half_outer, -half_outer, -half_thickness],  # 9: 右下
        [half_outer, half_outer, -half_thickness],   # 10: 右上
        [-half_outer, half_outer, -half_thickness],  # 11: 左上
    ])
    
    # 内框顶点（门洞）
    vertices.extend([
        [-half_inner, -half_inner, -half_thickness], # 12: 内左下
        [half_inner, -half_inner, -half_thickness],  # 13: 内右下
        [half_inner, half_inner, -half_thickness],   # 14: 内右上
        [-half_inner, half_inner, -half_thickness],  # 15: 内左上
    ])
    
    # 生成面（注意顶点索引从1开始）
    # 前面的门框（环形面：外框减去内框）
    faces.extend([
        [1, 2, 6],  # 下边右三角 (外左下->外右下->内右下)
        [6, 5, 1],  # 下边左三角 (内右下->内左下->外左下)
        [2, 3, 7],  # 右边下三角 (外右下->外右上->内右上)
        [7, 6, 2],  # 右边上三角 (内右上->内右下->外右下)
        [3, 4, 8],  # 上边右三角 (外右上->外左上->内左上)
        [8, 7, 3],  # 上边左三角 (内左上->内右上->外右上)
        [4, 1, 5],  # 左边下三角 (外左上->外左下->内左下)
        [5, 8, 4],  # 左边上三角 (内左下->内左上->外左上)
    ])
    
    # 后面的门框（环形面：外框减去内框）
    faces.extend([
        [9, 14, 10], # 下边右三角 (外左下->内右下->外右下)
        [14, 9, 13], # 下边左三角 (内右下->外左下->内左下)
        [10, 15, 11], # 右边下三角 (外右下->内右上->外右上)
        [15, 10, 14], # 右边上三角 (内右上->外右下->内右下)
        [11, 16, 12], # 上边右三角 (外右上->内左上->外左上)
        [16, 11, 15], # 上边左三角 (内左上->外右上->内右上)
        [12, 13, 9], # 左边下三角 (外左上->内左下->外左下)
        [13, 12, 16], # 左边上三角 (内左下->外左上->内左上)
    ])
    
    # 连接前后面的侧边
    # 外边的侧面
    faces.extend([
        [1, 9, 10], [10, 2, 1],    # 下边侧面
        [2, 10, 11], [11, 3, 2],   # 右边侧面  
        [3, 11, 12], [12, 4, 3],   # 上边侧面
        [4, 12, 9], [9, 1, 4],     # 左边侧面
    ])
    
    # 内边的侧面（门洞内壁）
    faces.extend([
        [5, 14, 13], [14, 5, 6],   # 下边内侧面
        [6, 15, 14], [15, 6, 7],   # 右边内侧面
        [7, 16, 15], [16, 7, 8],   # 上边内侧面  
        [8, 13, 16], [13, 8, 5],   # 左边内侧面
    ])
    
    # 写入OBJ文件
    with open(filename, 'w') as f:
        f.write("# Square Gate Model\n")
        f.write("# Generated by generate_gate_models.py\n\n")
        
        # 写入顶点
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        f.write("\n")
        
        # 写入面
        for face in faces:
            f.write(f"f {face[0]} {face[1]} {face[2]}\n")
    
    print(f"Generated square gate model: {filename}")

def generate_circle_gate_obj(filename: str, outer_radius: float = 0.7, inner_radius: float = 0.5,
                           gate_thickness: float = 0.1, segments: int = 32):
    """生成圆形门框的OBJ文件"""
    
    vertices = []
    faces = []
    
    half_thickness = gate_thickness / 2
    
    # 生成前面（Z+）的顶点
    # 外圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = outer_radius * math.cos(angle)
        y = outer_radius * math.sin(angle)
        vertices.append([x, y, half_thickness])
    
    # 内圆顶点  
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = inner_radius * math.cos(angle)
        y = inner_radius * math.sin(angle)
        vertices.append([x, y, half_thickness])
    
    # 生成后面（Z-）的顶点
    # 外圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = outer_radius * math.cos(angle)
        y = outer_radius * math.sin(angle)
        vertices.append([x, y, -half_thickness])
    
    # 内圆顶点
    for i in range(segments):
        angle = 2 * math.pi * i / segments
        x = inner_radius * math.cos(angle)
        y = inner_radius * math.sin(angle)
        vertices.append([x, y, -half_thickness])
    
    # 生成面
    # 前面的圆环
    for i in range(segments):
        next_i = (i + 1) % segments
        # 外圆到内圆的四边形，分解为两个三角形
        outer_curr = i + 1  # OBJ索引从1开始
        outer_next = next_i + 1
        inner_curr = segments + i + 1
        inner_next = segments + next_i + 1
        
        faces.extend([
            [outer_curr, outer_next, inner_next],
            [inner_next, inner_curr, outer_curr]
        ])
    
    # 后面的圆环
    for i in range(segments):
        next_i = (i + 1) % segments
        outer_curr = 2*segments + i + 1
        outer_next = 2*segments + next_i + 1
        inner_curr = 3*segments + i + 1
        inner_next = 3*segments + next_i + 1
        
        faces.extend([
            [outer_curr, inner_next, outer_next],
            [inner_next, outer_curr, inner_curr]
        ])
    
    # 连接前后面的侧边
    # 外圆的侧面
    for i in range(segments):
        next_i = (i + 1) % segments
        front_outer = i + 1
        front_outer_next = next_i + 1
        back_outer = 2*segments + i + 1
        back_outer_next = 2*segments + next_i + 1
        
        faces.extend([
            [front_outer, back_outer, back_outer_next],
            [back_outer_next, front_outer_next, front_outer]
        ])
    
    # 内圆的侧面（门洞内壁）
    for i in range(segments):
        next_i = (i + 1) % segments
        front_inner = segments + i + 1
        front_inner_next = segments + next_i + 1
        back_inner = 3*segments + i + 1
        back_inner_next = 3*segments + next_i + 1
        
        faces.extend([
            [front_inner, front_inner_next, back_inner_next],
            [back_inner_next, back_inner, front_inner]
        ])
    
    # 写入OBJ文件
    with open(filename, 'w') as f:
        f.write("# Circle Gate Model\n")
        f.write("# Generated by generate_gate_models.py\n\n")
        
        # 写入顶点
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        f.write("\n")
        
        # 写入面
        for face in faces:
            f.write(f"f {face[0]} {face[1]} {face[2]}\n")
    
    print(f"Generated circle gate model: {filename}")

def main():
    """主函数：生成所有门模型"""
    # 创建输出目录
    output_dir = "gate_models"
    os.makedirs(output_dir, exist_ok=True)
    
    # 生成方形门
    square_gate_file = os.path.join(output_dir, "square_gate.obj")
    generate_square_gate_obj(square_gate_file)
    
    # 生成圆形门
    circle_gate_file = os.path.join(output_dir, "circle_gate.obj") 
    generate_circle_gate_obj(circle_gate_file)
    
    print(f"\nGate models saved to '{output_dir}' directory:")
    print(f"- {square_gate_file}")
    print(f"- {circle_gate_file}")

if __name__ == "__main__":
    main()
